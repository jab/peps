PEP: 9999
Title: Higher-Kinded TypeVars
Author: Nikita Tikhonov <nekitdevofficial@gmail.com>,
        Alex Waygood <alex.waygood@gmail.com>
Sponsor: Jelle Ziljstra <jelle.zijlstra@gmail.com>
Discussions-To: https://github.com/nekitdev/peps/discussions
Status: Draft
Type: Standards Track
Topic: Typing
Content-Type: text/x-rst
Requires: 695
Created: 24-Jul-2022
Python-Version: 3.12

Abstract
========

:pep:`484` introduced ``TypeVar``, enabling generics parametrized with a single type.
``TypeVar`` itself can no be generic, though, and this PEP introduces
parametrization of type variables - that is, a generic ``TypeVar``, enabling *Higher-Kinded Types*
(*HKTs*). This enables a variety of use cases, in particular, it allows to write code generic
over *type constructors*, instead of being generic over *types* only.

Motivation
==========

HKTs have long been a requested feature, for quite some use cases [#typing-548]_.

.. code:: python

    from typing import Callable, Iterable


    def map_iterable[I[T]: Iterable[T], T, U](
        function: Callable[[T], U], iterable: I[T]
    ) -> I[U]:
        return type(iterable)(map(function, iterable))


    reveal_type(map_iterable(str, [1, 2, 3]))  # list[str]
    reveal_type(map_iterable(str, (1, 2, 3)))  # tuple[str]
    reveal_type(map_iterable(str, {1: 1}))  # fails
    # `dict` can not be initialized from `Iterable[str]`

.. code:: python

    from typing import Callable, Protocol

    type Unary[T, U] = Callable[[T], U]

    class Functor[T](Protocol):
        def map[F[T]: Functor[T], U](self: F[T], function: Unary[T, U]) -> F[U]:
            ...

.. code:: python

    from dataclasses import dataclass

    @dataclass
    class Wrap[T](Functor[T]):
        value: T

        def map[W[T]: Wrap[T], U](
            self: W[T], function: Unary[T, U]
        ) -> W[U]:
            return type(self)(function(self.value))

.. code:: python

    from collections import Mapping, MutableMapping
    
    # Taken from https://github.com/jab/bidict
    class BidirectionalMapping[K, V](Mapping[K, V]):
        """ABC for one-to-one Mapping; inverse Mapping maintained alongside forward mapping."""
        
        @property
        def inverse[BM: BidirectionalMapping[K, V]](self: BM[K, V]) -> BM[V, K]:
            ...


    class bidict(BidirectionalMapping[K, V], MutableMapping[K, V]):
         """Mutable BidirectionalMapping type."""
         # Thanks to HKT, no need to override `inverse` in subclasses like this one just to tell
         # type checkers that b.inverse is a bidict[V, K], not just a BidirectionalMapping[V, K].
         # Without HKT, every subclass must resort to hard-coding the subtype in an override:
         # - https://github.com/jab/bidict/blob/v0.22.0/bidict/_base.py#L165-L170
         # - https://github.com/jab/bidict/blob/v0.22.0/bidict/_frozenbidict.py#L27-L31
         # - https://github.com/jab/bidict/blob/v0.22.0/bidict/_bidict.py#L28-L30
         # - https://github.com/jab/bidict/blob/v0.22.0/bidict/_orderedbidict.py#L32-L34
         # - etc. 


.. code:: python

    >>> atomicnum_by_element = bidict({"hydrogen": 1})  # bidict[str, int]
    >>> atomicnum_by_element.inverse  # bidict[int, str]
    bidict({1: "hydrogen"})


Prior Art
=========

* https://returns.readthedocs.io/en/latest/pages/hkt.html
  TODO: Cite their HKT mypy plugin as evidence of demand for HKT in Python,
  discuss the results that the developers and users have had with it,
  to what extent this PEP and accompanying reference implementation(s)
  are influenced by it, and any other relevant history.


Specification
=============

Implementation
==============

References
==========

.. [#typing-548] Python ``typing`` issue #548:
   https://github.com/python/typing/issues/548

Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
